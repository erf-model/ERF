=== If no file names and line numbers are shown below, one can run
            addr2line -Cpfie my_exefile my_line_address
    to convert `my_line_address` (e.g., 0x4a6b) into file name and line number.
    Or one can use amrex/Tools/Backtrace/parse_bt.py.

=== Please note that the line number reported by addr2line may not be accurate.
    One can use
            readelf -wl my_exefile | grep my_line_address'
    to find out the offset for that line.

 0: ./ERF3d.gnu.TEST.MPI.ex(+0x2120c5) [0x55b00a7970c5]
    amrex::BLBackTrace::print_backtrace_info(_IO_FILE*) at /home/msanders/git/amrex//Src/Base/AMReX_BLBackTrace.cpp:179

 1: ./ERF3d.gnu.TEST.MPI.ex(+0x213f82) [0x55b00a798f82]
    amrex::BLBackTrace::handler(int) at /home/msanders/git/amrex//Src/Base/AMReX_BLBackTrace.cpp:85

 2: /lib/x86_64-linux-gnu/libc.so.6(+0x43090) [0x7f6ecbe41090]

 3: ./ERF3d.gnu.TEST.MPI.ex(+0xb524b) [0x55b00a63a24b]
    double const& amrex::Array4<double const>::operator()<double const, 0>(int, int, int) const at /home/msanders/git/amrex//Src/Base/AMReX_Array4.H:90
 (inlined by) operator() at /home/msanders/git/ERF/Exec/DensityCurrent_Terrain/../../Source/TimeIntegration/ERF_fast_rhs.cpp:305
 (inlined by) call_f<erf_fast_rhs(int, amrex::Vector<amrex::MultiFab>&, amrex::Vector<amrex::MultiFab>&, amrex::Vector<amrex::MultiFab>&, const amrex::MultiFab&, const amrex::Vector<amrex::MultiFab>&, amrex::Vector<amrex::MultiFab>&, std::array<amrex::MultiFab, 3>&, amrex::Geometry, amrex::InterpFaceRegister*, const SolverChoice&, const amrex::MultiFab&, const amrex::MultiFab&, const amrex::MultiFab&, const amrex::MultiFab&, amrex::Real, amrex::Real)::<lambda(int, int, int)> > at /home/msanders/git/amrex//Src/Base/AMReX_GpuLaunchFunctsC.H:29
 (inlined by) ParallelFor<erf_fast_rhs(int, amrex::Vector<amrex::MultiFab>&, amrex::Vector<amrex::MultiFab>&, amrex::Vector<amrex::MultiFab>&, const amrex::MultiFab&, const amrex::Vector<amrex::MultiFab>&, amrex::Vector<amrex::MultiFab>&, std::array<amrex::MultiFab, 3>&, amrex::Geometry, amrex::InterpFaceRegister*, const SolverChoice&, const amrex::MultiFab&, const amrex::MultiFab&, const amrex::MultiFab&, const amrex::MultiFab&, amrex::Real, amrex::Real)::<lambda(int, int, int)> > at /home/msanders/git/amrex//Src/Base/AMReX_GpuLaunchFunctsC.H:119

 4: ./ERF3d.gnu.TEST.MPI.ex(+0xbae0b) [0x55b00a63fe0b]
    erf_fast_rhs(int, amrex::Vector<amrex::MultiFab, std::allocator<amrex::MultiFab> >&, amrex::Vector<amrex::MultiFab, std::allocator<amrex::MultiFab> >&, amrex::Vector<amrex::MultiFab, std::allocator<amrex::MultiFab> >&, amrex::MultiFab const&, amrex::Vector<amrex::MultiFab, std::allocator<amrex::MultiFab> > const&, amrex::Vector<amrex::MultiFab, std::allocator<amrex::MultiFab> >&, std::array<amrex::MultiFab, 3ul>&, amrex::Geometry, amrex::InterpFaceRegister*, SolverChoice const&, amrex::MultiFab const&, amrex::MultiFab const&, amrex::MultiFab const&, amrex::MultiFab const&, double, double) at /home/msanders/git/amrex//Src/Base/AMReX_GpuLaunchFunctsC.H:115
 (inlined by) ParallelFor<erf_fast_rhs(int, amrex::Vector<amrex::MultiFab>&, amrex::Vector<amrex::MultiFab>&, amrex::Vector<amrex::MultiFab>&, const amrex::MultiFab&, const amrex::Vector<amrex::MultiFab>&, amrex::Vector<amrex::MultiFab>&, std::array<amrex::MultiFab, 3>&, amrex::Geometry, amrex::InterpFaceRegister*, const SolverChoice&, const amrex::MultiFab&, const amrex::MultiFab&, const amrex::MultiFab&, const amrex::MultiFab&, amrex::Real, amrex::Real)::<lambda(int, int, int)>, erf_fast_rhs(int, amrex::Vector<amrex::MultiFab>&, amrex::Vector<amrex::MultiFab>&, amrex::Vector<amrex::MultiFab>&, const amrex::MultiFab&, const amrex::Vector<amrex::MultiFab>&, amrex::Vector<amrex::MultiFab>&, std::array<amrex::MultiFab, 3>&, amrex::Geometry, amrex::InterpFaceRegister*, const SolverChoice&, const amrex::MultiFab&, const amrex::MultiFab&, const amrex::MultiFab&, const amrex::MultiFab&, amrex::Real, amrex::Real)::<lambda(int, int, int)>, erf_fast_rhs(int, amrex::Vector<amrex::MultiFab>&, amrex::Vector<amrex::MultiFab>&, amrex::Vector<amrex::MultiFab>&, const amrex::Multi
ERF_HOME        ?= ../
AMREX_HOME        ?= $(ERF_HOME)/Submodules/AMReX

TOP := $(ERF_HOME)

EBASE = ERF

EXTERN_CORE ?=

# Ignore loops not vectorizing in amrex
ifeq ($(COMP), llvm)
  DEFINES += -Wno-pass-failed
endif

#Turn off all fortran in amrex
ifneq ($(USE_MASA), TRUE)
  BL_NO_FORT = TRUE
endif

ifeq ($(USE_NETCDF), TRUE)
 LDFLAGS += -L${NETCDF_DIR}/lib
 LIBRARIES += -lnetcdf
endif

#sundials stuff
ifeq ($(USE_SUNDIALS_PP), TRUE)
  USE_ARKODE_PP=TRUE
  ifeq ($(USE_CUDA), TRUE)
    USE_CUDA_SUNDIALS_PP = TRUE
  endif
  include $(TOP)/Submodules/ThirdParty/Make.ThirdParty
endif

include $(AMREX_HOME)/Tools/GNUMake/Make.defs

# ERF uses a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP

#trun on NetCDF macro define
ifeq ($(USE_NETCDF), TRUE)
  DEFINES += -DERF_USE_NETCDF
endif

all: $(executable) 
	$(SILENT) $(RM) AMReX_buildInfo.cpp
	@echo SUCCESS

Bdirs := Source Source/Params/param_includes Source/RK3 Source/IO
Pdirs := Base Amr Boundary AmrCore

Bpack += $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir)/Make.package)
Blocs += $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir))

Bpack += $(foreach dir, $(Bdirs), $(TOP)/$(dir)/Make.package)
Blocs += $(foreach dir, $(Bdirs), $(TOP)/$(dir))

$(info $${Blocs} is [${Blocs}])

include $(Bpack)

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

CEXE_sources += AMReX_buildInfo.cpp
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/AMReX_buildInfo.H
INCLUDE_LOCATIONS += $(AMREX_HOME)/Tools/C_scripts

AMReX_buildInfo.cpp:
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --FCOMP "$(FCOMP)" --FCOMP_VERSION "$(FCOMP_VERSION)" \
          --MODULES "$(MNAMES)" \
          --GIT "$(TOP) $(AMREX_HOME)"

include $(AMREX_HOME)/Tools/GNUMake/Make.rules

clean::
	$(SILENT) $(RM) extern.f90
	$(SILENT) $(RM) AMReX_buildInfo.cpp

#-----------------------------------------------------------------------------
# for debugging.  To see the value of a Makefile variable,
# e.g. Fmlocs, simply do "make print-Fmlocs".  This will
# print out the value.
print-%: ; @echo $* is $($*) ; $(SILENT) $(RM) AMReX_buildInfo.cpp

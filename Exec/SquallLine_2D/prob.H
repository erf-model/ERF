#ifndef _PROB_H_
#define _PROB_H_

#include <string>

#include "AMReX_REAL.H"
#include "AMReX_ParmParse.H"
#include "AMReX_MultiFab.H"

#include "prob_common.H"
#include "EOS.H"
#include "IndexDefines.H"
#include "TileNoZ.H"

struct ProbParm : ProbParmDefaults {
  amrex::Real T_0 = 300.0; // surface temperature == mean potential temperature
  amrex::Real U_0 = 10.0;
  amrex::Real V_0 = 0.0;
  amrex::Real x_c = 0.0; // center of thermal perturbation
  amrex::Real z_c = 3200.0;
  amrex::Real x_r = 1000.0;
  amrex::Real z_r = 1000.0;
  amrex::Real T_pert = 5.0; // perturbation temperature
  // overridden physical constants
  amrex::Real C_p = 1004.0;
}; // namespace ProbParm


class Problem : public ProblemBase
{
public:
    Problem();

#include "Prob/init_density_hse_dry.H"

    void init_custom_pert (
        const amrex::Box&  bx,
        const amrex::Box& xbx,
        const amrex::Box& ybx,
        const amrex::Box& zbx,
        amrex::Array4<amrex::Real      > const& state,
        amrex::Array4<amrex::Real      > const& x_vel,
        amrex::Array4<amrex::Real      > const& y_vel,
        amrex::Array4<amrex::Real      > const& z_vel,
        amrex::Array4<amrex::Real      > const& r_hse,
        amrex::Array4<amrex::Real      > const& p_hse,
        amrex::Array4<amrex::Real const> const& z_nd,
        amrex::Array4<amrex::Real const> const& z_cc,
#if defined(ERF_USE_MOISTURE)
        amrex::Array4<amrex::Real      > const& qv,
        amrex::Array4<amrex::Real      > const& qc,
        amrex::Array4<amrex::Real      > const& qi,
#elif defined(ERF_USE_WARM_NO_PRECIP)
        amrex::Array4<amrex::Real      > const& qv,
        amrex::Array4<amrex::Real      > const& qc,
#endif
        amrex::GeometryData const& geomdata,
        amrex::Array4<amrex::Real const> const& mf_m,
        amrex::Array4<amrex::Real const> const& mf_u,
        amrex::Array4<amrex::Real const> const& mf_v,
        const SolverChoice& sc) override;


    void erf_init_dens_hse_moist (amrex::MultiFab& rho_hse,
                                  std::unique_ptr<amrex::MultiFab>& z_phys_nd,
                                  std::unique_ptr<amrex::MultiFab>& z_phys_cc,
                                  amrex::Geometry const& geom) override;

    void init_custom_terrain (
        const amrex::Geometry& geom,
        amrex::MultiFab& z_phys_nd,
        const amrex::Real& time) override;

    void erf_init_rayleigh (
        amrex::Vector<amrex::Real>& tau,
        amrex::Vector<amrex::Real>& ubar,
        amrex::Vector<amrex::Real>& vbar,
        amrex::Vector<amrex::Real>& wbar,
        amrex::Vector<amrex::Real>& thetabar,
        amrex::Geometry      const& geom) override;

protected:
    std::string name () override { return "Supercell"; }

private:
    ProbParm parms;
};

#endif

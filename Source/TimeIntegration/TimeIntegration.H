#ifndef _INTEGRATION_H_
#define _INTEGRATION_H_

#include <AMReX_MultiFab.H>
#include <AMReX_BCRec.H>
#include <AMReX_InterpFaceRegister.H>
#include "DataStruct.H"
#include "IndexDefines.H"
#include "ABLMost.H"

// This is the slow RHS when doing multi-rate, and the only RHS when doing RK3
void erf_slow_rhs_pre(int level, int nrk,
                      amrex::BoxArray& grids_to_evolve,
                      amrex::Vector<amrex::MultiFab>& S_rhs,
                      amrex::Vector<amrex::MultiFab>& S_data,
                      const amrex::MultiFab& S_prim,
                            amrex::Vector<amrex::MultiFab >& S_scratch,
                      const amrex::MultiFab& xvel,
                      const amrex::MultiFab& yvel,
                      const amrex::MultiFab& zvel,
#if defined(ERF_USE_MOISTURE)
                     const amrex::MultiFab& qvapor,
#endif
                      std::unique_ptr<amrex::MultiFab>& z_t,
                            amrex::MultiFab& Omega,
                      const amrex::MultiFab& source,
                      const amrex::MultiFab& buoyancy,
                            amrex::MultiFab* Tau11,
                            amrex::MultiFab* Tau22,
                            amrex::MultiFab* Tau33,
                            amrex::MultiFab* Tau12,
                            amrex::MultiFab* Tau13,
                            amrex::MultiFab* Tau21,
                            amrex::MultiFab* Tau23,
                            amrex::MultiFab* Tau31,
                            amrex::MultiFab* Tau32,
                            amrex::MultiFab* SmnSmn,
                            amrex::MultiFab* eddyDiffs,
                            amrex::MultiFab* Hfx1,
                            amrex::MultiFab* Hfx2,
                            amrex::MultiFab* Hfx3,
                            amrex::MultiFab* Diss,
                      const amrex::Geometry geom,
                      const SolverChoice& solverChoice,
                      std::unique_ptr<ABLMost>& most,
                      const amrex::Gpu::DeviceVector<amrex::BCRec> domain_bcs_type_d,
                      const amrex::Vector<amrex::BCRec> domain_bcs_type,
                      std::unique_ptr<amrex::MultiFab>& z0,
                      std::unique_ptr<amrex::MultiFab>& dJ,
                      const amrex::MultiFab* p0,
                      std::unique_ptr<amrex::MultiFab>& mapfac_m,
                      std::unique_ptr<amrex::MultiFab>& mapfac_u,
                      std::unique_ptr<amrex::MultiFab>& mapfac_v,
                      const amrex::Real* dptr_rayleigh_tau,
                      const amrex::Real* dptr_rayleigh_ubar,
                      const amrex::Real* dptr_rayleigh_vbar,
                      const amrex::Real* dptr_rayleigh_wbar,
                      const amrex::Real* dptr_rayleigh_thetabar);

void erf_slow_rhs_post(int level, amrex::Real time,
                       amrex::BoxArray& grids_to_evolve,
                       amrex::Vector<amrex::MultiFab>& S_rhs,
                       amrex::Vector<amrex::MultiFab>& S_old,
                       amrex::Vector<amrex::MultiFab>& S_new,
                       amrex::Vector<amrex::MultiFab>& S_data,
                       const amrex::MultiFab& S_prim,
                       amrex::Vector<amrex::MultiFab >& S_scratch,
                       const amrex::MultiFab& xvel,
                       const amrex::MultiFab& yvel,
                       const amrex::MultiFab& zvel,
                       const amrex::MultiFab& source,
                       const amrex::MultiFab* SmnSmn,
                       const amrex::MultiFab* eddyDiffs,
                             amrex::MultiFab* Hfx1,
                             amrex::MultiFab* Hfx2,
                             amrex::MultiFab* Hfx3,
                             amrex::MultiFab* Diss,
                       const amrex::Geometry geom,
                       const SolverChoice& solverChoice,
                       std::unique_ptr<ABLMost>& most,
                       const amrex::Gpu::DeviceVector<amrex::BCRec> domain_bcs_type_d,
                       std::unique_ptr<amrex::MultiFab>& z0,
                       std::unique_ptr<amrex::MultiFab>& dJ_old,
                       std::unique_ptr<amrex::MultiFab>& dJ_new,
                       std::unique_ptr<amrex::MultiFab>& mapfac_m,
                       std::unique_ptr<amrex::MultiFab>& mapfac_u,
                       std::unique_ptr<amrex::MultiFab>& mapfac_v);

void erf_fast_rhs_N (int step, int level,
                     amrex::BoxArray& grids_to_evolve,
                     amrex::Vector<amrex::MultiFab >& S_slow_rhs,
                     const amrex::Vector<amrex::MultiFab >& S_old,
                     amrex::Vector<amrex::MultiFab >& S_stage_data,
                     const amrex::MultiFab& S_stage_prim,
                     const amrex::MultiFab& pi_stage,
                     const amrex::MultiFab& fast_coeffs,
                     amrex::Vector<amrex::MultiFab >& S_data,
                     amrex::Vector<amrex::MultiFab >& S_scratch,
                     const amrex::Geometry geom,
                     const SolverChoice& solverChoice,
                     const amrex::Real fast_dt, const amrex::Real invfac,
                     std::unique_ptr<amrex::MultiFab>& mapfac_m,
                     std::unique_ptr<amrex::MultiFab>& mapfac_u,
                     std::unique_ptr<amrex::MultiFab>& mapfac_v);

void erf_fast_rhs_T (int step, int level,
                     amrex::BoxArray& grids_to_evolve,
                     amrex::Vector<amrex::MultiFab >& S_slow_rhs,
                     const amrex::Vector<amrex::MultiFab >& S_old,
                     amrex::Vector<amrex::MultiFab >& S_stage_data,
                     const amrex::MultiFab& S_stage_prim,
                     const amrex::MultiFab& pi_stage,
                     const amrex::MultiFab& fast_coeffs,
                     amrex::Vector<amrex::MultiFab >& S_data,
                     amrex::Vector<amrex::MultiFab >& S_scratch,
                     const amrex::Geometry geom,
                     const SolverChoice& solverChoice,
                           amrex::MultiFab& Omega,
                     std::unique_ptr<amrex::MultiFab>& z_phyx,
                     std::unique_ptr<amrex::MultiFab>& dJ,
                     const amrex::Real fast_dt, const amrex::Real invfac,
                     std::unique_ptr<amrex::MultiFab>& mapfac_m,
                     std::unique_ptr<amrex::MultiFab>& mapfac_u,
                     std::unique_ptr<amrex::MultiFab>& mapfac_v);

void erf_fast_rhs_MT (int step, int level,
                      amrex::BoxArray& grids_to_evolve,
                      amrex::Vector<amrex::MultiFab >& S_slow_rhs,
                      const amrex::Vector<amrex::MultiFab >& S_old,
                      amrex::Vector<amrex::MultiFab >& S_stage_data,
                      const amrex::MultiFab& S_stage_prim,
                      const amrex::MultiFab& pi_stage,
                      const amrex::MultiFab& fast_coeffs,
                      amrex::Vector<amrex::MultiFab >& S_data,
                      amrex::Vector<amrex::MultiFab >& S_scratch,
                      const amrex::Geometry geom,
                      const SolverChoice& solverChoice,
                            amrex::MultiFab& Omega,
                      std::unique_ptr<amrex::MultiFab>& z_t_rk,
                      const amrex::MultiFab* z_t_pert,
                      std::unique_ptr<amrex::MultiFab>& z_phys_old,
                      std::unique_ptr<amrex::MultiFab>& z_phys_new,
                      std::unique_ptr<amrex::MultiFab>& z_phys_src,
                      std::unique_ptr<amrex::MultiFab>& dJ_old,
                      std::unique_ptr<amrex::MultiFab>& dJ_new,
                      std::unique_ptr<amrex::MultiFab>& dJ_src,
                      const amrex::Real fast_dt, const amrex::Real invfac,
                      std::unique_ptr<amrex::MultiFab>& mapfac_m,
                      std::unique_ptr<amrex::MultiFab>& mapfac_u,
                      std::unique_ptr<amrex::MultiFab>& mapfac_v);

void make_fast_coeffs (int level,
                       amrex::BoxArray& grids_to_evolve,
                       amrex::MultiFab& fast_coeffs,
                       amrex::Vector<amrex::MultiFab >& S_stage_data,
                       const amrex::MultiFab& S_stage_prim,
                       const amrex::MultiFab& pi_stage,
                       const amrex::Geometry geom,
                       const SolverChoice& solverChoice,
                       std::unique_ptr<amrex::MultiFab>& dJ,
                       const amrex::MultiFab* r0,
                       const amrex::MultiFab* pi0,
                       const amrex::Real fast_dt);

void make_buoyancy(amrex::BoxArray& grids_to_evolve,
                   amrex::Vector<  amrex::MultiFab>& S_data,
                   const           amrex::MultiFab & S_prim,
                         amrex::MultiFab& buoyancy,
#if defined(ERF_USE_MOISTURE)
                   const amrex::MultiFab& qvapor,
                   const amrex::MultiFab& qcloud,
                   const amrex::MultiFab& qice,
                   const amrex::Gpu::DeviceVector<amrex::Real> qv_d,
                   const amrex::Gpu::DeviceVector<amrex::Real> qc_d,
                   const amrex::Gpu::DeviceVector<amrex::Real> qi_d,
#endif
                   const amrex::Geometry geom,
                   const SolverChoice& solverChoice,
                   const amrex::MultiFab* r0);
#endif

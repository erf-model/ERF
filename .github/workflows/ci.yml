name: ERF CI

on:
  push:
    # branches: [development]
    paths-ignore:
      - Docs
      - README.rst
      - license.txt

  pull_request:
    branches: [development]

jobs:

  Build-And-Test:

    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest]
        include:
        - os: ubuntu-latest
          install_deps: sudo apt-get install mpich libmpich-dev gcovr
          comp: gnu
          procs: $(nproc)

    steps:

    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup
      run: |
        # echo "::add-matcher::.github/problem-matchers/gcc.json"
        echo "NPROCS=${{matrix.procs}}" >> $GITHUB_ENV
        # cmake -E make_directory ${{runner.workspace}}/deps

    - name: Handle Dependencies
      run: |
        # Install MPI
        ${{matrix.install_deps}}

        ## Install MetaPhysicL
        #cd ${{runner.workspace}}/deps
        #git clone --recursive https://github.com/roystgnr/MetaPhysicL.git ${{runner.workspace}}/deps/MetaPhysicL
        #cd ${{runner.workspace}}/deps/MetaPhysicL
        #./bootstrap
        #./configure --prefix="${{runner.workspace}}/deps/install/MetaPhysicL"
        #make -j ${{env.NPROCS}}
        #make install

        ## Install MASA
        #cd ${{runner.workspace}}/deps
        #git clone --recursive https://github.com/manufactured-solutions/MASA.git ${{runner.workspace}}/deps/MASA
        #cd ${{runner.workspace}}/deps/MASA
        #./bootstrap
        #./configure CXX='mpicxx -std=c++11' CC=mpicc \
        #  METAPHYSICL_DIR="${{runner.workspace}}/deps/install/MetaPhysicL" \
        #  --prefix="${{runner.workspace}}/deps/install/MASA"
        #make -j ${{env.NPROCS}}
        #make install

    - name: Configure CMake
      run: |
        cmake \
          -B${{runner.workspace}}/ERF/build-${{matrix.os}} \
          -DCMAKE_INSTALL_PREFIX:PATH=${{runner.workspace}}/ERF/install \
          -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
          -DERF_DIM:STRING=3 \
          -DERF_ENABLE_MPI:BOOL=ON \
          -DERF_ENABLE_TESTS:BOOL=ON \
          -DERF_ENABLE_MASA:BOOL=OFF \
          -DERF_ENABLE_ALL_WARNINGS:BOOL=ON \
          -DERF_ENABLE_AMREX_EB:BOOL=ON \
          -DERF_ENABLE_FCOMPARE:BOOL=ON \
          -DCODECOV:BOOL=ON \
          ${{github.workspace}};
        # ${{matrix.mpipreflags}} \

    - name: Build
      run: |
        cmake --build ${{runner.workspace}}/ERF/build-${{matrix.os}} --parallel ${{env.NPROCS}};

    - name: Regression Tests
      run: |
        ctest -L regression -VV
      working-directory: ${{runner.workspace}}/ERF/build-${{matrix.os}}

    - name: Generate coverage report
      working-directory: ${{runner.workspace}}/ERF/build-${{matrix.os}}
      run: |
        find . -type f -name '*.gcno' -not -ipath "**Tests**" -not -ipath "**build**" -exec gcov -pb {} +
        cd ..
        gcovr -g -k -r . --xml regressioncov.xml  # --html --html-details -o regressioncov.html # -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        dry_run: false
        # token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
        files: ./regressioncov.xml # optional
        flags: regtests # optional
        # name: codecov-umbrella # optional
        fail_ci_if_error: true # optional (default = false)
        verbose: true # optional (default = false)
        directory: ${{runner.workspace}}/ERF

    - name: Success artifacts
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: build-and-test
        path: |
          ${{runner.workspace}}/ERF/regressioncov.xml
    - name: Failing test artifacts
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: build-and-test
        path: |
          ${{runner.workspace}}/ERF/regressioncov.xml

name: ERF CUDA CI

on:
  push:
    # branches: [development]
    paths-ignore:
      - Docs
      - README.rst
      - license.txt

  pull_request:
    branches: [development]

concurrency:
  group: ${{ github.ref }}-${{ github.head_ref }}-cuda-ci
  cancel-in-progress: true

jobs:
  cuda-build:
    runs-on: ubuntu-20.04
    name: CUDA v${{matrix.cuda_ver}}
    strategy:
      matrix:
        cuda_pkg: [11-0]
        include:
          - cuda_ver: "11.0"
            cuda_pkg: 11-0
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{github.token}}
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Prepare CUDA environment
        run: Submodules/AMReX/.github/workflows/dependencies/dependencies_nvcc.sh ${{matrix.cuda_ver}}
      - name: Install CCache
        run: Submodules/AMReX/.github/workflows/dependencies/dependencies_ccache.sh
      - name: Set Up Cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ccache-${{ github.workflow }}-${{ github.job }}-git-${{ github.sha }}
          restore-keys: |
               ccache-${{ github.workflow }}-${{ github.job }}-git-
      - name: Configure and build
        run: |
          export CCACHE_COMPRESS=1
          export CCACHE_COMPRESSLEVEL=10
          export CCACHE_MAXSIZE=600M
          ccache -z

          export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
          export LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda/lib64:${LD_LIBRARY_PATH}
          which nvcc || echo "nvcc not in PATH!"
          cmake -Bbuild-${{matrix.cuda_pkg}} \
            -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CUDA_COMPILER_LAUNCHER=ccache \
            -DAMReX_CUDA_ERROR_CROSS_EXECUTION_SPACE_CALL=ON \
            -DAMReX_CUDA_ERROR_CAPTURE_THIS=ON           \
            -DERF_DIM:STRING=3 \
            -DERF_ENABLE_MPI:BOOL=ON \
            -DERF_ENABLE_CUDA:BOOL=ON \
            -DERF_ENABLE_REGRESSION_TESTS_ONLY:BOOL=ON .
          cmake --build build-${{matrix.cuda_pkg}} -- -j $(nproc) \
          2>&1 | tee -a ${{runner.workspace}}/build-${{matrix.cuda_pkg}}-output.txt;

          ccache -s
          du -hs ~/.cache/ccache

      - name: Report
        run: |
          egrep "warning:|error:" ${{runner.workspace}}/build-${{matrix.cuda_pkg}}-output.txt \
            | egrep -v "Submodules/amrex" | egrep -v "lto-wrapper: warning:" | sort | uniq \
            | awk 'BEGIN{i=0}{print $0}{i++}END{print "Warnings: "i}' > ${{runner.workspace}}/build-${{matrix.cuda_pkg}}-output-warnings.txt
          cat ${{runner.workspace}}/build-${{matrix.cuda_pkg}}-output-warnings.txt
          export return=$(tail -n 1 ${{runner.workspace}}/build-${{matrix.cuda_pkg}}-output-warnings.txt | awk '{print $2}')
          exit ${return}

  save_pr_number:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Save PR number
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          echo $PR_NUMBER > pr_number.txt
      - uses: actions/upload-artifact@v4
        with:
          name: pr_number
          path: pr_number.txt
          retention-days: 1
